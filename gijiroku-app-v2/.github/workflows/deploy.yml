name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

jobs:
  # ================= ビルド・パッケージング =================
  build-and-package:
    name: Build & Package
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
            arch: x64
            ext: exe
          - os: macos-latest
            platform: mac
            arch: universal
            ext: dmg
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: AppImage
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2-dev libxcomposite1-dev libxdamage1-dev libxrandr2-dev libgbm1-dev libxss1-dev libasound2-dev
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS用の依存関係がある場合はここに追加
        echo "macOS dependencies setup"
        
    - name: Setup signing certificates (macOS)
      if: matrix.os == 'macos-latest'
      env:
        APPLE_DEVELOPER_CERTIFICATE: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}
        APPLE_DEVELOPER_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      run: |
        if [ -n "$APPLE_DEVELOPER_CERTIFICATE" ]; then
          echo "Setting up Apple Developer certificates"
          # 証明書のセットアップ処理
        else
          echo "Apple Developer certificate not available, skipping code signing"
        fi
        
    - name: Setup code signing (Windows)
      if: matrix.os == 'windows-latest'
      env:
        WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
        WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      run: |
        if ($env:WINDOWS_CERTIFICATE) {
          Write-Host "Setting up Windows code signing certificate"
          # Windows用証明書のセットアップ処理
        } else {
          Write-Host "Windows certificate not available, skipping code signing"
        }
      shell: powershell
      
    - name: Setup caches
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.ELECTRON_CACHE }}
          ${{ env.ELECTRON_BUILDER_CACHE }}
          ~/.npm
          ~/.cache
        key: ${{ runner.os }}-build-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-
          
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: |
        npm run build:electron
        npm run build:vite
        
    - name: Package Electron application
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        CSC_LINK: ${{ matrix.os == 'macos-latest' && secrets.APPLE_DEVELOPER_CERTIFICATE || secrets.WINDOWS_CERTIFICATE }}
        CSC_KEY_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD || secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          npm run dist:linux
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          npm run dist:windows
        else
          npm run dist:mac
        fi
      shell: bash
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gijiroku-app-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          release/**/*.exe
          release/**/*.dmg  
          release/**/*.AppImage
          release/**/*.deb
          release/**/*.rpm
        retention-days: 30

  # ================= 自動更新設定 =================
  setup-auto-updates:
    name: Setup Auto-Updates
    runs-on: ubuntu-latest
    needs: build-and-package
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate update metadata
      run: |
        VERSION=${{ github.ref_name }}
        echo "Generating update metadata for version: $VERSION"
        
        # latest.yml for Windows
        cat > latest.yml << EOF
        version: $VERSION
        files:
          - url: gijiroku-app-win-x64.exe
            sha512: # SHA512 will be generated by electron-builder
            size: # Size will be generated by electron-builder
        path: gijiroku-app-win-x64.exe
        sha512: # SHA512 will be generated by electron-builder
        releaseDate: $(date -Iseconds)
        EOF
        
        # latest-mac.yml for macOS
        cat > latest-mac.yml << EOF
        version: $VERSION
        files:
          - url: gijiroku-app-mac-universal.dmg
            sha512: # SHA512 will be generated by electron-builder
            size: # Size will be generated by electron-builder
        path: gijiroku-app-mac-universal.dmg
        sha512: # SHA512 will be generated by electron-builder
        releaseDate: $(date -Iseconds)
        EOF
        
    - name: Upload update metadata
      uses: actions/upload-artifact@v4
      with:
        name: update-metadata
        path: |
          latest.yml
          latest-mac.yml

  # ================= テスト環境デプロイ =================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-package
    if: github.event.inputs.environment == 'staging' || (github.event_name == 'push' && github.ref == 'refs/heads/develop')
    environment: staging
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      
    - name: Deploy to staging server
      run: |
        echo "🚀 Deploying to staging environment"
        # ステージング環境へのデプロイ処理
        echo "Staging deployment completed"
        
    - name: Run smoke tests
      run: |
        echo "🧪 Running smoke tests on staging"
        # ステージング環境でのスモークテスト
        echo "Smoke tests completed"

  # ================= 本番環境デプロイ =================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-package, setup-auto-updates]
    if: github.event.inputs.environment == 'production' || github.event_name == 'release'
    environment: production
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      
    - name: Deploy to production
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        PRODUCTION_SERVER: ${{ secrets.PRODUCTION_SERVER }}
      run: |
        echo "🚀 Deploying to production environment"
        
        # CDNへのアップロード (例: AWS S3, GitHub Releases等)
        if [ -n "$DEPLOY_KEY" ]; then
          echo "Uploading release artifacts to CDN"
          # 実際のアップロード処理
        fi
        
        echo "Production deployment completed"
        
    - name: Update release channels
      run: |
        echo "📢 Updating release channels"
        # リリースチャンネルの更新処理
        echo "Release channels updated"

  # ================= 配信通知 =================
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Notify stakeholders
      run: |
        VERSION=${{ github.ref_name || 'staging' }}
        ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}
        
        echo "📬 Notifying stakeholders about $ENVIRONMENT deployment"
        echo "Version: $VERSION"
        echo "Environment: $ENVIRONMENT"
        echo "Status: Success"
        
        # 実際の通知処理 (Slack, Discord, Email等)
        echo "Notification sent successfully"